#+Title: Theorem Proving in Lean
#+Author: [[http://www.andrew.cmu.edu/user/avigad][Jeremy Avigad]]

* Interacting with Lean

You are now familiar with the fundamentals of dependent type theory,
both as a language for defining mathematical objects and a language
for constructing proofs. The one thing you are missing is a mechanism
for defining new data types. We will fill this gap in the next chapter,
which introduces the notion of an /inductive data type/. But first, in
this chapter, we take a break from the mechanics of type theory to
explore some pragmatic aspects of interacting with Lean.

** Displaying Information
:PROPERTIES:
  :CUSTOM_ID: Displaying_Information
:END:

There are a number of ways in which you can query Lean for information
about its current state and the objects and theorems that are
available in the current context. You have already seen two of the
most common ones, =check= and =eval=. Remember that =check= is often
used in conjunction with the =@= operator, which makes all of the
arguments to a theorem or definition explicit. In addition, you can
use the =print= command to get information about any identifier. If
the identifier denotes a definition or theorem, Lean prints the type
of the symbol, and its definition. If it is a constant or an axiom,
Lean indicates that fact, and shows the type.
#+BEGIN_SRC lean
-- examples with equality
check eq
check @eq
check eq.symm
check @eq.symm

print eq.symm

-- examples with and
check and
check and.intro
check @and.intro

-- examples with addition
check add
check @add
eval add 3 2
print add

-- a user-defined function
def foo {α : Type} (x : α) : α := x

check foo
check @foo
eval foo
eval (foo @nat.zero)
print foo
#+END_SRC

There are other useful =print= commands:
#+BEGIN_SRC text
print definition             : display definition
print inductive              : display an inductive type and its constructors
print notation               : display all notation
print notation <tokens>      : display notation using any of the tokens
print axioms                 : display assumed axioms
print options                : display options set by user or emacs mode
print prefix <namespace>     : display all declarations in the namespace
print classes                : display all classes
print instances <class name> : display all instances of the given class
print fields <structure>     : display all "fields" of a structure
#+END_SRC
We will discuss inductive types, structures, classes, instances in the
next four chapters. Here are examples of how these commands are used:
#+BEGIN_SRC lean
print notation
print notation + * -
print axioms
print options
print prefix nat
print prefix nat.le
print classes
print instances ring
print fields ring
#+END_SRC


The behavior of the generic print command is determined by its
argument, so that the following pairs of commands all do the same
thing.
#+BEGIN_SRC lean
print add
print definition add

print +
print notation +

print nat
print inductive nat

print group
print inductive group
#+END_SRC
Moreover, both =print group= and =print inductive group= recognize
that a group is a structure (see [[file:09_Structures_and_Records.org::#Structures_and_Records][Chapter 9]]), and so print the fields as
well.

** Setting Options
:PROPERTIES:
  :CUSTOM_ID: Setting_Options
:END:

Lean maintains a number of internal variables that can be set by users
to control its behavior. The syntax for doing so is as follows:
#+BEGIN_SRC text
set_option <name> <value>
#+END_SRC

One very useful family of options controls the way Lean's /pretty-
printer/ displays terms. The following options take an input of true
or false:
#+BEGIN_SRC text
pp.implicit  : display implicit arguments
pp.universes : display hidden universe parameters
pp.coercions : show coercions
pp.notation  : display output using defined notations
pp.beta      : beta reduce terms before displaying them
#+END_SRC
In Lean, /coercions/ can be inserted automatically to cast an element
of one data type to another, for example, to cast an element of =nat=
to an element of =int=. We will say more about them later.
# TODO: add back when implemented
# This list is not exhaustive; you can see a complete list by
# typing =set_option pp.= and then using tab-completion in the Lean
# mode for Emacs, also discussed below.

As an example, the following settings yield much longer output:
#+BEGIN_SRC lean
set_option pp.implicit true
set_option pp.universes true
set_option pp.notation false
set_option pp.numerals false

check 2 + 2 = 4
eval (λ x, x + 2) = (λ x, x + 3)
check (λ x, x + 1) 1

set_option pp.beta false
check (λ x, x + 1) 1
#+END_SRC
Pretty printing additional information is often very useful when you
are debugging a proof, or trying to understand a cryptic error
message. Too much information can be overwhelming, though, and Lean's
defaults are generally sufficient for ordinary interactions.

** Using the Library

To use Lean effectively you will inevitably need to make use of
definitions and theorems in the library. Recall that the =import=
command at the beginning of a file imports previously compiled results
from other files, and that importing is transitive; if you import
=foo= and =foo= imports =bar=, then the definitions and theorems from
=bar= are available to you as well. But the act of opening a namespace,
which provides shorter names,
does not carry over. In each file, you need to open the namespaces
you wish to use.

# TODO: what to say here? Will we keep "standard"? So far, we have
# probably only opened nat, and almost all the notation is defined at
# the top level.

# The command =import standard= imports the essential parts of the
# standard library, and by now you have seen many of the namespaces you
# will need. For example, you should =open nat= for notation when you
# are working with the natural numbers, and =open int= when you are
# working with the integers.

In general, it is important for you to be familiar with the library
and its contents, so you know what theorems, definitions, notations,
and resources are available to you. Below we will see that Emacs'
Lean mode can also help you find things you need, but studying the
contents of the library directly is often unavoidable. Lean's standard
library can be found online, on github:
#+BEGIN_QUOTE
[[https://github.com/leanprover/lean/tree/master/library]]
#+END_QUOTE
You can see the contents of the directories and files using github's
browser interface. If you have installed Lean on your own computer,
you can find the library in the =lean= folder, and explore it
with your file manager. Comment headers at the top of each file
provide additional information.

Lean's library developers follow general naming guidelines to make it
easier to guess the name of a theorem you need, or to find it using
tab completion in Emacs' Lean mode, which is discussed in the next
section. Identifiers are generally =snake_case=, which is to say, they
are composed of words written in lower case separated by
underscores. For the most part, we rely on descriptive names. Often
the name of theorem simply describes the conclusion:
#+BEGIN_SRC lean
open nat

check succ_ne_zero
check @mul_zero
check @mul_one
check @sub_add_eq_add_sub
check @le_iff_lt_or_eq
#+END_SRC
If only a prefix of the description is enough to convey the meaning,
the name may be made even shorter:
#+BEGIN_SRC lean
open nat

-- BEGIN
check @neg_neg
check pred_succ
-- END
#+END_SRC
Sometimes, to disambiguate the name of theorem or better convey the
intended reference, it is necessary to describe some of the
hypotheses. The word "of" is used to separate these hypotheses:
#+BEGIN_SRC lean
check @nat.lt_of_succ_le
check @lt_of_not_ge
check @lt_of_le_of_ne
check @add_lt_add_of_lt_of_le
#+END_SRC

# TODO: add this when we have these names
#
# Sometimes abbreviations or alternative descriptions are easier to work
# with. For example, we use `pos`, `neg`, `nonpos`, `nonneg` rather than
# `zero_lt`, `lt_zero`, `le_zero`, and `zero_le`.
# #+BEGIN_SRC lean
# check mul_pos
# check mul_nonpos_of_nonneg_of_nonpos
# check add_lt_of_lt_of_nonpos
# check add_lt_of_nonpos_of_lt
# #+END_SRC

Sometimes the word "left" or "right" is helpful to describe variants
of a theorem.
#+BEGIN_SRC lean
check @add_le_add_left
check @add_le_add_right
#+END_SRC

# TODO: add these
# check le_of_mul_le_mul_left
# check le_of_mul_le_mul_right

We can also use the word "self" to indicate a repeated argument:
#+BEGIN_SRC lean
check mul_inv_self
check neg_add_self
#+END_SRC

Remember that identifiers in Lean can be organized into hierarchical
namespaces. For example, the theorem named =lt_of_succ_le= in the
namespace =nat= has full name =nat.lt_of_succ_le=, but the shorter
name is made available by the command =open nat=. We will see in
[[file:07_Inductive_Types.org::#Inductive_Types][Chapter 7]] and [[file:09_Structures_and_Records.org::#Structures_and_Records][Chapter 9]] that defining structures and inductive data
types in Lean generates associated operations, and these are stored in
a namespace with the same name as the type under definition. For
example, the product type comes with the following opens:
#+BEGIN_SRC lean
check @prod.mk
check @prod.fst
check @prod.snd
check @prod.rec
#+END_SRC
The first is used to construct a pair, whereas the next two,
=prod.fst= and =prod.snd=, project the two elements. The last,
=prod.rec=, provides another mechanism for defining functions on a
product in terms of a function on the two components. Names like
=prod.rec= are /protected/, which means that one has to use the full
name even when the =prod= namespace is open.

With the propositions as types correspondence, logical connectives are
also instances of inductive types, and so we tend to use dot notation for them as well:
#+BEGIN_SRC lean
check @and.intro
check @and.elim
check @and.left
check @and.right
check @or.inl
check @or.inr
check @or.elim
check @exists.intro
check @exists.elim
check @eq.refl
check @eq.subst
#+END_SRC

** Notation and Abbreviations
:PROPERTIES:
  :CUSTOM_ID: Notation_and_Abbreviations
:END:

Lean's parser is an instance of a Pratt parser, a non-backtracking
parser that is fast and flexible. You can read about Pratt parsers in
a number of places online, such as here:
#+BEGIN_QUOTE
[[http://en.wikipedia.org/wiki/Pratt_parser]]
[[http://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing]]
#+END_QUOTE
Identifiers can include any alphanumeric characters, including Greek
characters (other than Π , Σ , and λ , which, as we have seen, have a
special meaning in the dependent type theory). They can also include
subscripts, which can be entered by typing =\_= followed
by the desired subscripted character.

Lean's parser is moreover extensible, which is to say, we can define
new notation.
#+BEGIN_SRC lean
notation `[` a `**` b `]` := a * b + 1

def mul_square (a b : ℕ) := a * a * b * b

infix `<*>`:50 := mul_square

eval [2 ** 3]
eval 2 <*> 3
#+END_SRC
In this example, the =notation= command defines a complex binary
notation for multiplying and adding one. The =infix= command declares
a new infix operator, with precedence 50, which associates to the
left. (More precisely, the token is given left-binding power 50.) The
command =infixr= defines notation which associates to the right,
instead.

If you declare these notations in a namespace, the notation is only
available when the namespace is open. You can declare temporary notation
using the keyword =local=, in which case the notation is available
in the current file, and moreover, within the scope of the current
=namespace= or =section=, if you are in one.
#+BEGIN_SRC lean
-- BEGIN
local notation `[` a `**` b `]` := a * b + 1
local infix `<*>`:50 := λ a b : ℕ, a * a * b * b
-- END
#+END_SRC

The file =reserved_notation.lean= in the =init= folder of the library
declares the left-binding powers of a number of common symbols that
are used in the library.
#+BEGIN_QUOTE
https://github.com/leanprover/lean/blob/master/library/init/reserved_notation.lean
#+END_QUOTE
You are welcome to overload these symbols for your own use, but you
cannot change their right-binding power.

Remember that you can direct the pretty-printer to suppress notation
with the command =set_option pp.notation false=. You can also declare
notation to be used for input purposes only with the =[parsing_only]=
attribute:
#+BEGIN_SRC lean
notation [parsing_only] `[` a `**` b `]` := a * b + 1

variables a b : ℕ
check [a ** b]
#+END_SRC
The output of the =check= command displays the expression as =a * b +
1=. Lean also provides mechanisms for iterated notation, such as =[a,
b, c, d, e]= to denote a list with the indicated elements. See the
discussion of =list= in the next chapter for an example.


# TODO(Jeremy): this is as far as I got.

# Notation in Lean can be /overloaded/, which is to say, the same
# notation can be used for more than one purpose. In that case, Lean's
# elaborator will try to disambiguate based on context. For example, we
# have already seen that with the =eq.ops= namespace open, the inverse
# symbol can be used to denote the symmetric form of an equality. It can
# also be used to denote the multiplicative inverse:
# #+BEGIN_SRC lean
# import data.rat
# open rat eq.ops

# variable r : ℚ

# check r⁻¹             -- ℚ
# check (eq.refl r)⁻¹   -- r = r
# #+END_SRC
# Insofar as overloads produce ambiguity, they should be used
# sparingly. We avoid the use of overloads for arithmetic operations
# like =+=, =*=, =-=, and =/= by using /type classes/, as described in
# Chapter [[file:09_Type_Classes.org::#Type_Classes][Type Classes]]. In the following, the addition operation denotes
# a general algebraic operation that can be instantiated to =nat= or
# =int= as required:
# #+BEGIN_SRC lean
# import data.nat data.int
# open algebra nat int

# variables a b : int
# variables m n : nat

# check a + b    -- ℤ
# check m + n    -- ℕ
# print notation +
# #+END_SRC
# This is sometimes called /parametric polymorphism/, in contrast to /ad
# hoc polymorphism/, which we are considering here. For example, the
# notation =++= is used to concatenate both lists and vectors:
# #+BEGIN_SRC lean
# import data.list data.tuple
# open list tuple

# variables (α : Type) (m n : ℕ)
# variables (v : tuple α m) (w : tuple α n) (s t : list α)

# check s ++ t
# check v ++ w
# #+END_SRC
# Where it is necessary to disambiguate, Lean allows you to precede an
# expression with the notation =#<namespace>= to specify the namespace
# in which notation is to be interpreted.
# #+BEGIN_SRC lean
# import data.list data.tuple
# open list tuple

# variables (α : Type) (m n : ℕ)
# variables (v : tuple α m) (w : tuple α n) (s t : list α)

# -- BEGIN
# check (#list λ x y, x ++ y)
# check (#tuple λ x y, x ++ y)
# -- END
# #+END_SRC

# Lean provides an =abbreviation= mechanism that is similar to the
# notation mechanism.
# #+BEGIN_SRC lean
# import data.nat
# open nat

# abbreviation double (x : ℕ) : ℕ := x + x

# theorem foo (x : ℕ) : double x = x + x := rfl
# check foo
# #+END_SRC
# An abbreviation is a transient form of definition that is expanded as
# soon as an expression is processed. As with notation, however, the
# pretty-printer re-constitutes the expression and prints the type of
# =foo= as =double x = x + x=. As with notation, you can designate
# an abbreviation to be =[parsing-only]=, and you can direct the
# pretty-printer to suppress their use with the command =set_option
# pp.notation false=. Finally, again as with notation, you can limit
# the scope of an abbreviation by prefixing the declarations with the
# =local= modifier.

# As the name suggests, abbreviations are intended to be used as
# convenient shorthand for long expressions. One common use is to
# abbreviate a long identifier:
# #+BEGIN_SRC lean
# definition my_long_identity_function {α : Type} (x : α) : α := x
# local abbreviation my_id := @my_long_identity_function
# #+END_SRC

# ** Coercions
# :PROPERTIES:
#   :CUSTOM_ID: Coercions
# :END:

# Lean also provides mechanisms to automatically insert /coercions/
# between types. These are user-defined functions between datatypes that
# make it possible to "view" one datatype as another. For example, any
# natural number can be coerced to an integer.
# #+BEGIN_SRC lean
# import data.nat data.int
# open nat int

# variables a b : int
# variables m n : nat

# -- BEGIN
# check m + n          -- m + n : ℕ
# check a + n          -- a + n : ℤ
# check n + a          -- n + a : ℤ
# check (m + n : ℤ)    -- m + n : ℤ

# set_option pp.coercions true

# check m + n          -- m + n : ℕ
# check a + n          -- a + of_nat n : ℤ
# check n + a          -- of_nat n + a : ℤ
# check (m + n : ℤ)    -- of_nat (m + n) : ℤ
# -- END
# #+END_SRC
# Setting the option =pp.coercions= to =true= makes the coercions
# explicit. Coercions that are declared in a namespace are only
# available to the system when the namespace is opened. The notation
# =(t : T)= constrains Lean to find an interpertation of =t= which gives
# it a type that is definitionally equal to =T=, thereby allowing you to
# specify the interpretation of =t= you have in mind. Thus checking
# =(m + n : ℤ)= forces the insertion of a coercion.

# Here is an example of how we can define a coercion from the booleans
# to the natural numbers.
# #+BEGIN_SRC lean
# import data.bool data.nat
# open bool nat

# definition bool.to_nat [coercion] (b : bool) : nat :=
# bool.cond b 1 0

# eval 2 + ff
# eval 2 + tt
# eval tt + tt + tt + ff

# print coercions        -- show all coercions
# print coercions bool   -- show all coercions from bool
# #+END_SRC
# The tag "coercion" is an /attribute/ that is associated with the
# symbol =bool.to_nat=. It does not change the meaning of
# =bool.to_nat=. Rather, it associates additional information to the
# symbol that informs Lean's elaboration algorithm, as discussed in
# Section [[file:08_Building_Theories_and_Proofs.org::#Elaboration_and_Unification][Elaboration and Unification]]. We could also declare
# =bool.to_nat= to be a coercion after the fact as follows:
# #+BEGIN_SRC lean
# import data.bool data.nat
# open bool nat

# -- BEGIN
# definition bool.to_nat (b : bool) : nat :=
# bool.cond b 1 0

# attribute bool.to_nat [coercion]
# -- END
# eval 2 + ff
# eval 2 + tt
# eval tt + tt + tt + ff
# #+END_SRC
# In both cases, the scope of the coercion is the current namespace, so
# the coercion will be in place whenever the module is imported and the
# namespace is open. Sometimes it is useful to assign an attribute only
# temporarily. The =local= modifier ensures that the declaration is only
# in effect in the current file, and within the current namespace or
# section:
# #+BEGIN_SRC lean
# import data.bool data.nat
# open bool nat

# -- BEGIN
# definition bool.to_nat (b : bool) : nat :=
# bool.cond b 1 0

# local attribute bool.to_nat [coercion]
# -- END
# #+END_SRC

# Overloads and coercions introduce "choice points" in the elaboration
# process, forcing the elaborator to consider multiple options and
# backtrack appropriately. This can slow down the elaboration
# process. What is more problematic is that it can make error messages
# less informative: Lean only reports the result of the last
# backtracking path, which means the failure that is reported to the
# user may be due to the wrong interpretation of an overload or
# coercion. This is why Lean provides mechanism for namespace
# management: parsing and elaboration go more smoothly when we only
# import the notation that we need.

# Nonetheless, overloading is quite convenient, and often causes no
# problems. There are various ways to manually disambiguate an
# expression when necessary. One is to precede the expression with the
# notation =#<namespace>=, to specify the namespace in which notation is
# to be interpreted. Another is to replace the notation with an explicit
# function name. Yet a third is to use the =(t : T)= notation to indicate
# the intended type.

# #
# # #+BEGIN_SRC lean
# # import data.nat data.int
# # open nat int

# # check 2 + 2
# # eval 2 + 2

# # check #nat 2 + 2
# # eval #nat 2 + 2

# # check #int 2 + 2
# # eval #int 2 + 2

# # check nat.add 2 2
# # eval nat.add 2 2

# # check int.add 2 2
# # eval int.add 2 2

# # check (2 + 2 : nat)
# # eval (2 + 2 : nat)

# # check (2 + 2 : int)
# # eval (2 + 2 : int)

# # check 0

# # check nat.zero

# # check (0 : nat)
# # check (0 : int)
# # #+END_SRC
